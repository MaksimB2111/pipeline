name: Node.js Express CI/CD Pipeline

on:
  push:
    branches: [main]
    tags: ['v*.*.*']
  pull_request:
    branches: [main]
  schedule:
    # –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 8:00 UTC –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    - cron: '0 8 * * 1'
  workflow_dispatch:
    inputs:
      environment:
        description: '–°—Ä–µ–¥–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è'
        required: true
        default: 'staging'
        type: choice
        options:
          - dev
          - staging
          - production

jobs:
  code-quality:
    name: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm install
        
      - name: Check code formatting
        run: |
          npm install prettier --no-save
          npx prettier --check "**/*.js" || echo "Code formatting issues found"
        
      - name: Lint code
        run: |
          npm install eslint --no-save
          npx eslint app.js || echo "Linting issues found"
          
      - name: Audit dependencies for security vulnerabilities
        run: npm audit --audit-level=high || echo "Security audit warnings found"

  tests:
    name: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          #cache: 'npm'
          
      - name: Install dependencies
        run: npm install
        
      - name: Run tests
        run: npm test
        
      - name: Verify app startup
        run: |
          node -e "const app = require('./app.js'); console.log('App loaded successfully')"
          
      - name: Initialize code coverage
        run: |
          echo "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –∫–æ–¥–∞ —Ç–µ—Å—Ç–∞–º–∏"
          echo "–ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞: —É—Å–ª–æ–≤–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å 85%" > coverage.txt
          
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: coverage.txt
          retention-days: 7

  build:
    name: –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    runs-on: ubuntu-latest
    needs: tests
    if: success() && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Generate build metadata
        id: metadata
        run: |
          echo "::set-output name=timestamp::$(date +'%Y%m%d%H%M%S')"
          echo "::set-output name=commit_sha::$(git rev-parse --short HEAD)"
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "::set-output name=version::${GITHUB_REF#refs/tags/}"
          elif [[ $GITHUB_REF == refs/heads/main ]]; then
            echo "::set-output name=version::latest"
          else
            echo "::set-output name=version::dev-$(git rev-parse --short HEAD)"
          fi
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/node-express-app:${{ steps.metadata.outputs.version }}
            ${{ secrets.DOCKER_USERNAME }}/node-express-app:latest
          labels: |
            org.opencontainers.image.created=${{ steps.metadata.outputs.timestamp }}
            org.opencontainers.image.revision=${{ steps.metadata.outputs.commit_sha }}
            org.opencontainers.image.version=${{ steps.metadata.outputs.version }}
          build-args: |
            APP_VERSION=${{ steps.metadata.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Scan Docker image for vulnerabilities
        run: |
          echo "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞ –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏..."
          echo "–£—Å–ª–æ–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Docker –æ–±—Ä–∞–∑–∞: –£—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"

  deploy:
    name: –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
    runs-on: ubuntu-latest
    needs: build
    environment: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - name: Prepare deployment
        run: |
          echo "üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Å—Ä–µ–¥–µ ${{ github.event.inputs.environment || 'staging' }}"
          
      - name: Deploy application
        run: |
          echo "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏–º–∏—Ç–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
          echo "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
          echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
          echo "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
          
      - name: Deployment notification
        run: |
          echo "–°–≤–æ–¥–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:"
          echo "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: Node.js Express CI/CD Demo"
          echo "–í–µ—Ä—Å–∏—è: ${{ github.ref == 'refs/heads/main' && 'latest' || github.ref }}"
          echo "–°—Ä–µ–¥–∞: ${{ github.event.inputs.environment || 'staging' }}"
          echo "–û–±—Ä–∞–∑: ${{ secrets.DOCKER_USERNAME }}/node-express-app:latest"
          echo "–í—Ä–µ–º—è: $(date +'%Y-%m-%d %H:%M:%S')"
